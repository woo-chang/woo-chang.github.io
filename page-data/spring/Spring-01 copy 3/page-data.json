{"componentChunkName":"component---src-templates-blog-post-js","path":"/spring/Spring-01 copy 3/","result":{"data":{"site":{"siteMetadata":{"title":"한 페이지가 될 수 있게","author":"woo-chang","siteUrl":"https://woo-chang.github.io","comment":{"disqusShortName":"","utterances":"woo-chang/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9ed76f81-4eb0-57d4-8d06-c316abbb0dad","excerpt":"시작하기 배경 Enum 활용해보자! 위 이미지는 IntelliJ 프로젝트에서 새로운 자바 클래스를 생성할 때 확인할 수 있는 창이다. 평소 자바 프로젝트를 진행하면서 나 는 자주 생성해서 사용했지만 은 유독 사용하지 않았다. Enum이 개념적으로 무엇인지는 알고 있지만, 확실하게 정리가 되지 않았기에 사용을 꺼렸던 것 같다. Enum…","html":"<h2 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h2>\n<h3 id=\"배경\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BD\" aria-label=\"배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배경</h3>\n<blockquote>\n<p>Enum 활용해보자!</p>\n</blockquote>\n<p align=\"center\"><img src=\"https://velog.velcdn.com/images/woo-chang/post/73267c2d-c47b-4315-a3a8-32103a5db43f/image.png\" width=\"50%\"></p>\n<p>위 이미지는 IntelliJ 프로젝트에서 새로운 자바 클래스를 생성할 때 확인할 수 있는 창이다.</p>\n<p>평소 자바 프로젝트를 진행하면서 <code class=\"language-text\">Class</code>나 <code class=\"language-text\">Interface</code>는 자주 생성해서 사용했지만 <code class=\"language-text\">Enum</code>은 유독 사용하지 않았다. Enum이 개념적으로 무엇인지는 알고 있지만, 확실하게 정리가 되지 않았기에 사용을 꺼렸던 것 같다.</p>\n<p>Enum 개념을 확실히 정리하고 장점을 살려 코드를 작성해보고자 한다.</p>\n<h3 id=\"불편함\" style=\"position:relative;\"><a href=\"#%EB%B6%88%ED%8E%B8%ED%95%A8\" aria-label=\"불편함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불편함</h3>\n<blockquote>\n<p>상수</p>\n</blockquote>\n<p><strong>상수란?</strong> 변하지 않거나 일정한 값을 가진 수나 양을 의미</p>\n<p>자바에서는 모든 것이 클래스이므로 상수를 관리하기 위한 별도의 클래스를 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConstant</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ONE <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TWO <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> THREE <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">final</code> 예약어를 사용하여 초기화 이후 변하지 않음을 나타내고 <code class=\"language-text\">static</code> 예약어를 사용하여 해당 클래스의 인스턴스 생성없이 사용할 수 있도록 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyConstant</span><span class=\"token punctuation\">.</span>ONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 출력결과</span>\n<span class=\"token number\">1</span></code></pre></div>\n<p><code class=\"language-text\">Class</code>를 통해 상수를 관리하기에 꽤 괜찮은 방법이라는 생각이 들 수 있다.\n하지만 상수를 위와 같은 방법으로 다루기에는 <strong>불편함</strong>이 존재한다.</p>\n<blockquote>\n<p>타입 안전성이 보장되지 않는다.</p>\n</blockquote>\n<p aligh=\"center\"><img src=\"https://velog.velcdn.com/images/woo-chang/post/fecf15de-de80-4662-a77e-f6eef46ea6be/image.png\" width=\"70%\"></p>\n<p>수학 문제에서 난이도가 BASIC 문제와 HARD 문제가 존재하고 각각 난이도에서도 레벨이 존재할 때 다음과 같이 표현할 수 있다. 다른 난이도 문제임에도 레벨에 의해 같은 값을 가질 수 있다.</p>\n<p>상수로 이를 관리하게 된다면 컴파일러는 2개를 같은 값으로 인식하기에 타입적인 안정성을 가지기 힘든 문제가 발생한다.</p>\n<p><code class=\"language-text\">BASIC_LEVEL_ONE</code>이 들어가야 할 곳에 <code class=\"language-text\">HARD_LEVEL_ONE</code>이 들어가도 정상적으로 컴파일이 수행된다는 의미이다.</p>\n<p>이는 <strong>표현력 문제</strong>까지 연결되는 문제이다.</p>\n<blockquote>\n<p>프로그램 관리도 불편하다.</p>\n</blockquote>\n<p align=\"center\"><img src=\"https://velog.velcdn.com/images/woo-chang/post/24b85fa3-588c-4481-a158-8187e53b0d63/image.png\" width=\"70%\"></p>\n<p>열거형으로 상수를 관리하는 방법은 해당 값이 클라이언트에게 그대로 전해지기 때문에 변경이 발생하면 <strong>다시 컴파일</strong>해줘야 한다. 다시 컴파일해주지 않는다면 변경된 점이 반영되지 않은 이전의 프로그램으로 동작하게 된다.</p>\n<h2 id=\"java-enum\" style=\"position:relative;\"><a href=\"#java-enum\" aria-label=\"java enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA ENUM</h2>\n<h3 id=\"등장\" style=\"position:relative;\"><a href=\"#%EB%93%B1%EC%9E%A5\" aria-label=\"등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>등장</h3>\n<p align=\"center\"><img src=\"https://velog.velcdn.com/images/woo-chang/post/aea9e614-1a08-4a2c-a9c9-bf4aa57bcd63/image.png\" width=\"60%\"></p>\n<p>열거형 타입의 필요성을 느끼게 되었고 <strong>자바 1.5버전</strong>부터 새로 추가되었다.</p>\n<p>자바에서는 <code class=\"language-text\">Class</code>이기에 얻을 수 있는 별도의 장점이 존재한다.</p>\n<h3 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<blockquote>\n<p>이름 공간이 존재한다.</p>\n</blockquote>\n<p align=\"center\"><img src=\"https://velog.velcdn.com/images/woo-chang/post/1515f92d-bf23-4cd4-8176-ae23d7d1cd17/image.png\" width=\"40%\"></p>\n<p>다음과 같이 <code class=\"language-text\">Basic</code>, <code class=\"language-text\">Hard</code>를 정의하였을 때, 각각의 <strong>이름 공간(namespace)</strong>이 존재하기에 이름이 같더라도 구분할 수 있다.</p>\n<p>또한 <strong>필드값</strong>만 공개되고 <strong>상수값</strong>은 클라이언트에 새겨지지 않기 때문에 새로운 상수를 추가하거나 순서를 바꾸게 되더라도 다시 컴파일하지 않아도 된다.</p>\n<blockquote>\n<p>타입 안정성이 존재한다.</p>\n</blockquote>\n<p align=\"center\"><img src=\"https://velog.velcdn.com/images/woo-chang/post/6f31a4b6-ac95-4146-9f7a-6c45342619f5/image.png\" width=\"80%\"></p>\n<p>상수는 값으로 전달되기에 타입 안정성을 보장하기 힘들었지만, Enum은 각각의 타입이 정해져 있기에 <strong>타입 안정성을 보장</strong>할 수 있다.</p>\n<p>메서드의 매개변수 타입으로 특정 타입을 지정해두면 해당 타입만 받을 수 있다.</p>\n<p><code class=\"language-text\">checkHardLevel</code> 메서드는 <code class=\"language-text\">Hard</code> 타입만 받을 수 있기에 <code class=\"language-text\">Basic</code> 타입이 들어올 경우 변경을 요구하고 있는 것을 확인할 수 있다.</p>\n<h2 id=\"활용하기\" style=\"position:relative;\"><a href=\"#%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>활용하기</h2>\n<h3 id=\"간단한-코드\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\"간단한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumExample1</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">{</span>\n    SPRING<span class=\"token punctuation\">,</span> SUMMER<span class=\"token punctuation\">,</span> FALL<span class=\"token punctuation\">,</span> WINTER\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season</span> s <span class=\"token operator\">:</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" / \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>계절 정보를 담는 <code class=\"language-text\">Season</code>을 정의하고, 각각의 문자열과 순서를 출력하는 간단한 코드이다.</p>\n<ul>\n<li><code class=\"language-text\">name()</code> : 열거 객체의 문자열을 리턴한다.</li>\n<li><code class=\"language-text\">ordinal()</code> :열거 객체의 순서를 리턴한다.</li>\n</ul>\n<h3 id=\"발전된-코드\" style=\"position:relative;\"><a href=\"#%EB%B0%9C%EC%A0%84%EB%90%9C-%EC%BD%94%EB%93%9C\" aria-label=\"발전된 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발전된 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumExample2</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Card</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">HEART</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">DIAMOND</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">SPADE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">CLOVER</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span>HEART<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span>HEART<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>열거 객체에 데이터를 연결하고 메서드를 정의해서 사용하는 형태이다.</p>\n</blockquote>\n<p><code class=\"language-text\">private final int value</code></p>\n<ul>\n<li>열거형 객체와 다른 값을 연결하기 위한 변수 선언이 필요하다.</li>\n</ul>\n<p><code class=\"language-text\">Card(int value)</code></p>\n<ul>\n<li>생성자는 private만 허용하는데 열거 상수 옆에 붙는 형식으로 사용된다.</li>\n</ul>\n<p><code class=\"language-text\">public int value()</code></p>\n<ul>\n<li>필요에 의해 메서드를 정의해서 사용할 수 있다.</li>\n</ul>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>이름 공간 및 타입 안정성 제공</li>\n<li>임의의 필드나 메서드 추가 가능</li>\n<li>인터페이스 구현 가능</li>\n<li>자동완성, 오타검증 등 IDE의 지원</li>\n<li>허용 가능한 값을 제한하고 리팩토링 시 범위가 최소화</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>Integer, String에 비해 더 많은 메모리를 사용하기에 앱의 크기와 런타임 메모리 사용량의 증가</li>\n</ul>","frontmatter":{"title":"스프링 알아보기","date":"May 13, 2022"}}},"pageContext":{"slug":"/spring/Spring-01 copy 3/","previous":{"fields":{"slug":"/spring/Spring-01 copy 4/"},"frontmatter":{"title":"스프링 알아보기"}},"next":{"fields":{"slug":"/spring/Spring-01 copy/"},"frontmatter":{"title":"스프링 알아보기"}}}}}